.. Copyright (c) 2018 Netronome Systems, Inc.
.. _process:

========================
Working with Git patches
========================

General requirements for nfp-drv-kmods
======================================

nfp-drv-kmods follows Linux kernel-style development. Code should be posted to
nfp-drv-dev mailing list for review in form of patches. General good practices
apply, like:

- A single patch corresponds to a single logical change.
- The commit message is always required.
- The commit messages should explain what patch does and why (not necessarily
  how, we can read the code) and use imperative form of verbs.

Remember:

- The kernel is inherently multi-threaded.
- Memory allocations may fail.
- Do not pack structs unless you really have to.
- Return code are interpreted as ``errno``, so please use standard error codes
  and try to propagate errors.

Additionally:

- Do not overuse brackets. Unless GCC complains you should just let the
  operator precedence do its work.
- Use ``err_`` as prefix for labels on the error path, use ``exit_`` as prefix
  if error path is shared with normal exit path.
- Use ``FIELD_PREP``/``FIELD_GET`` macros.
- Note the convention we have in the driver for multi-line function definitions
  (type on a separate line unless it is ``int``). Prefer::

    static struct type *
    function_name(struct bla *bla, int a, bool b, enum c d,
                  int e, int f);

  Over::

    static struct type *function_name(struct bla *bla, int a,
                                      bool b, enum c d,
                                      int e, int f);

- Remember to provide ``#defines`` for constants.
- Do not use parenthesis where they are not needed.
- Order includes alphabetically.
- Never include ``<linux/versions.h>``, depend on one of nfp's compat headers
  to include it for you.
- Only include one compat header (nfp_net_compat.h in networking code or
  kcompat.h otherwise).
- Do not add Fixes tags, maintainers will do it for you.
- Include headers in this order::

    #include /* compat */

    #include /* linux headers */

    #include /* driver headers */

  Note the empty lines.
- Do not add unnecessary comments at the beginning of source files (no comments
  explaining what the file contains), e.g. this is entirely useless::

    /*
     * nfp_net_newfeature.c
     * Netronome network device driver: newfeature(tm) support
     * Authors: A Nonymous <a.nonymous@netronome.com>
     */

- Do not put your local cruft in .gitignore, only files generated by the build
  have a place there.
- Please keep in mind that kernel developers are really pedantic about the
  code. It would be best if you see yourself working on the driver code more in
  the future to follow the internal mailing list and learn from the mistakes of
  others.

We have an automated build script which also runs basic kernel-style checks,
please run it for patches touching to driver code. See :ref:`kmod_test_patch`
for more information.

In discussions on the mailing list please make sure you always use reply-all
and reply **under** the quoted text.

Keep in mind that commit messages are visible for people from outside the
company. Please do not mention JIRAs and internal project names (use Agilio OvS
for beagle, NFP6??0 for C0 etc). If you want to explain some internal details
put them in the cover letter which is not part of the Git history.

Testing
=======

Changes have to be properly tested.

Moreover we now have tests in the repository under tests/. Any new feature will
have to be accompanied by relevant tests. Please see :ref:`tests` for more
information.

Kernel coding guides
====================

General guide for submitting patches to Linux kernel:

https://www.kernel.org/doc/Documentation/process/submitting-patches.rst

Coding style guidelines:

https://www.kernel.org/doc/Documentation/process/coding-style.rst

Using Git guide from wireless folks:

https://wireless.wiki.kernel.org/en/developers/documentation/git-guide

Upstreaming and pushing changes
===============================

Our PF driver is upstream since Linux 4.11. Patches should be generated against
the master branch of the internal repo and posted for review by Kuba, Simon and
Nic. If patch is deemed relevant for upstream (most patches will) you will have
to wait until upstreaming is done before pushing. We will handle upstreaming
and pushing on per patch basis, please don't push unless one of the reviewers
clearly asked you to.

Note that due to upstreaming requirements we strongly prefer to have the same
code in all branches. In fact B0 branch is just a link to master, please **only
push code to master branch**, it will show up in B0 branch automatically.
Please also make sure you test your code on B0 as well as any other hardware it
may affect. Backporting to "stable" branches can be done after patch is pushed
to master.

Merges are disallowed. Please always rebase your code.

Development branches
====================

Feel free to create your own development branches for internal use and sharing
the code with other engineers. Sharing builds depending on non-official (master
or stable) branches outside of the company is **strictly prohibited** and if
you ever do that you will be severely chastised, and your project may suffer as
well. You have been warned :).

Tips, tricks, cheatsheet
========================

Save an email from GMail
------------------------

Patches sent to the mailing lists should be inline, not an attachment. To save
the patch in GMail click on the "more" arrow > Show original > hit Ctrl-S to
save the mail.

If the saved email has DOS-style line ends (carriage returns) use dos2unix
command to convert them.

Save the patch from patchwork
-----------------------------

If the patch was sent to nfp-drv-dev mailing list it will appear on
`patchwork`_. Click the ``download patch`` link to get it.

.. _patchwork:
   http://patchwork.netronome.com/project/nfp-drv-dev/list/?archive=both&state=*

Applying patches
----------------

::

    $ git am /path/to/file

Optionally, if one would like to:

1. Take a look at what changes are in patch::

    $ git apply --stat /path/to/file

2. Check if patch is troublesome::

    $ git apply --check /path/to/file

Creating patches
----------------

All local changes::

    $ git format-patch origin/master

Single patch (latest commit)::

    $ git format-patch HEAD~1

Multiple (12) patches with cover letter, to directory my_patches::

    $ git format-patch HEAD~12 --cover-letter -o my_patches/

This will generate 12 patches and cover letter. Put general description of the
entire series in the cover letter.

If you generate new version of the same patch after review please mark it with
a version, for v2 it would be::

    $ git format-patch HEAD~1 --subject-prefix="PATCH v2"

Sending patches
---------------

The best way to send patches is with git-send-email. You have to configure it
first. See this `guide for setting GMail`_.

.. _`guide for setting GMail`:
   https://coderwall.com/p/dp-gka/setting-up-git-send-email-with-gmail

And you can sent emails like this::

    $ git send-email my_patches/* --to nfp-drv-dev@netronome.com

Reviewing code
--------------

We have Patchwork set up for nfp-drv-dev mailing list:
http://patchwork.netronome.com/project/nfp-drv-dev

Incorporating feedback
----------------------

If you receive feedback for your code on the list please address **all parts of
it** and make a new submission (send the revised patch again) with adjusted
subject. Note that if you use GMail you may miss some pieces of feedback since
feedback is generally inline! Please look carefully. Desktop email clients
usually display quotes in different color which makes things easier. Giving the
same feedback over and over is very frustrating for reviewers.

Please keep discussion on the list (reply-all) and **not** ping Kuba for
reviews on Skype :).
