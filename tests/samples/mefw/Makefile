# Set those to what your card is
CHIP ?= nfp-4xxx-b0
AMDA ?= hydrogen

NFCC := nfcc
CFLAGS := -W3 -chip $(CHIP)
FWNAME := TEST_FW_12345678

NFLD := nfld
LDFLAGS := -res.i24.emem.base 0x00008000 -chip $(CHIP)
TARGET_MES := mei0.me0

NUM_DUMMY_PORTS ?= 2

# Build firmwares for RT-SYM testing, number denotes the count of symbols
# to include in the firmware
RTSYM_FILES := rts_0.list rts_1.list rts_2.list rts_3.list rts_17.list \
	rts_100.list

# Build the firmwares with MIP and RT-SYM but also one without MIP or
# a specific version of it
FWS = $(patsubst %.list,rm_%.nffw,${RTSYM_FILES}) \
	rts_100.nffw rm1_rts_100.nffw rm2_rts_100.nffw \
	rts_dump.nffw rts_vals.nffw dummy_nfd.nffw

all: $(FWS) clean

%.nffw: %.list
	$(NFLD) $(LDFLAGS) -o $@ -u $(TARGET_MES) $<
rm_%.nffw: %.list
	$(NFLD) -rtsyms -mip $(LDFLAGS) -o $@ -u $(TARGET_MES) $<
rm1_%.nffw: %.list
	$(NFLD) -rtsyms -mip_v1 $(LDFLAGS) -o $@ -u $(TARGET_MES) $<
rm2_%.nffw: %.list
	$(NFLD) -rtsyms -mip_v2 $(LDFLAGS) -o $@ -u $(TARGET_MES) $<
rts_dump.nffw: rts_17.list abs_rtsym.list
	$(NFLD) -L abs_rtsym.list -rtsyms -name $(FWNAME) -mip $(LDFLAGS) \
	-o $@ -u $(TARGET_MES) $<
rts_vals.nffw: rts_vals.list abs_rtsym.list
	$(NFLD) -L abs_rtsym.list -rtsyms -name $(FWNAME) -mip $(LDFLAGS) \
	-o $@ -u $(TARGET_MES) $<
dummy_nfd.nffw: dummy_nfd.list
	$(NFLD) -rtsyms -name $(FWNAME) -mip $(LDFLAGS) \
	-o $@ -u $(TARGET_MES) $<

# This rule will generate different count of RT-SYMS by setting a define
# and using the single C source as a basis
rts_%.list: rts.c
	$(NFCC) $< $(CFLAGS) -o $@ \
	-D NUM_SYMS=$(subst .list,,$(subst rts_,,$@))

rts_vals.list: rts_vals.c
	$(NFCC) $< $(CFLAGS) -o $@

abs_rtsym.list: abs_rtsym.uc
	nfas -o $@ -codeless $<

dummy_nfd.list: dummy_nfd.uc
	nfas $(CFLAGS) -D NUM_DUMMY_PORTS=$(NUM_DUMMY_PORTS) -o $@ $<

clean:
	rm -f *.list *.obj *.db *.trace *.uci *.ucp

distclean: clean
	rm -f *.nffw *.ca

.PHONY: all clean distclean
