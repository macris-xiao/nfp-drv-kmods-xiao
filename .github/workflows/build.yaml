name: Build

# ========== TRIGGER ==========

on:
  push:
    branches:
      - main            # default branch name
      - '*-build*'      # Temporary build, no testing
      - '*build-*'      # Temporary build, no testing
      - 'prerelease-*'  # Prerelease build
      - 'release-*'     # Release build
      - '*.check'

env:
  DOWNLOAD: ".download"
  UNPACKED: ".unpacked"

jobs:
  build-upstream-ubuntu:
    name: Build Upstream (Ubuntu)
    runs-on: ubuntu-${{ matrix.release.runs-on }}
    timeout-minutes: 20
    env:
      CDN: "cdn.kernel.org/pub/linux/kernel"
      GITWEB: "git.kernel.org"
      KERNEL_TARGET: "deb-pkg"
    strategy:
      matrix:
        release: [
          { name: "net-next",  runs-on: "20.04", },
          { name: "net",       runs-on: "20.04", },
          { name: "5.19",      runs-on: "20.04", },
          { name: "5.18",      runs-on: "20.04", },
          { name: "5.17",      runs-on: "20.04", },
        ]
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Set Environment (Release)
        if: startsWith(matrix.release.name, 'net') != true
        run: |
          RELEASE="${{ matrix.release.name }}"
          MAJOR="${RELEASE%.*}"
          DIR="linux-$RELEASE"
          echo "CACHE_ID=$RELEASE" >> $GITHUB_ENV
          echo "EXTRA_DEP=$EXTRA_DEP" >> $GITHUB_ENV
          echo "KERNEL_DIR=$UNPACKED/$DIR" >> $GITHUB_ENV
          echo "REMOTE=$CDN/v$MAJOR.x/$DIR.tar.xz" >> $GITHUB_ENV
          echo "TAR_FLAGS=-J" >> $GITHUB_ENV

      - name: Set Environment (Development Tree)
        if: startsWith(matrix.release.name, 'net')
        run: |
          TREE="${{ matrix.release.name }}"
          COMMIT_ID="$(wget -q -O - https://$GITWEB/netdev/$TREE/p/master | sed -En 's/[^ ]* //; T; s/(.{12}).*/\1/; p; q')"
          DIR="$TREE-master"
          echo "REMOTE=$GITWEB/pub/scm/linux/kernel/git/netdev/$TREE.git/snapshot/$DIR.tar.gz" >> $GITHUB_ENV
          echo "CACHE_ID=$COMMIT_ID" >> $GITHUB_ENV
          echo "KERNEL_DIR=$UNPACKED/$DIR" >> $GITHUB_ENV
          echo "TAR_FLAGS=-z" >> $GITHUB_ENV

      - name: Cache Kernel Header Package
        uses: actions/cache@v3
        id: header-cache
        env:
          cache-name: cache-headers-upstream
        with:
          path: ${{ env.UNPACKED }}/linux-headers-*.deb
          # Need invalidate the cache when local_defconfig changes.
          key: ${{ env.cache-name }}-${{ env.CACHE_ID }}-on-ubuntu-${{ hashFiles('./.github/data/local_defconfig') }}

      - name: Set Environment (Not Cached)
        if: steps.header-cache.outputs.cache-hit != 'true'
        run: |
          EXTRA_DEP+=" "libelf-dev
          echo "EXTRA_DEP=$EXTRA_DEP" >> $GITHUB_ENV

      - name: Install Dependencies
        if: env.EXTRA_DEP != ''
        run: sudo apt-get -q=2 install ${{ env.EXTRA_DEP }}

      - name: Download Kernel Source
        if: steps.header-cache.outputs.cache-hit != 'true'
        uses: ./.github/actions/download
        with:
          output-path: "$DOWNLOAD"
          url: "https://$REMOTE"

      - name: Unpack Kernel Source
        if: steps.header-cache.outputs.cache-hit != 'true'
        run: |
          mkdir -p "$UNPACKED"
          tar -C "$UNPACKED" "$TAR_FLAGS" -xf "$DOWNLOAD/$REMOTE"

      - name: Configure Kernel
        if: steps.header-cache.outputs.cache-hit != 'true'
        run: |
          cp -p .github/data/local_defconfig "$KERNEL_DIR/arch/x86/configs/"
          make -s -C "$KERNEL_DIR" local_defconfig

      - name: Build Kernel Packages
        if: steps.header-cache.outputs.cache-hit != 'true'
        run: |
          make -s -j"$(nproc)" -C "$KERNEL_DIR" "$KERNEL_TARGET"

      - name: List Kernel Header Packages
        run: |
          ls "$UNPACKED"/linux-headers-*.deb

      - name: Unpack Kernel Headers
        uses: ./.github/actions/unpack-deb
        with:
            input-path: ${{ env.UNPACKED }}
            output-path: ${{ env.UNPACKED }}

      - name: Build
        uses: ./.github/actions/build
        with:
            search-path: "${{ env.UNPACKED }}/usr/src"
