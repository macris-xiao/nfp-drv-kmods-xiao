name: Build

# ========== TRIGGER ==========

on:
  push:
    branches:
      - main            # default branch name
      - '*-build*'      # Temporary build, no testing
      - '*build-*'      # Temporary build, no testing
      - 'prerelease-*'  # Prerelease build
      - 'release-*'     # Release build
      - '*.check'

env:
  DOWNLOAD: ".download"
  UNPACKED: ".unpacked"

jobs:
  build-centos:
    name: Build CentOS, BC Linux, OpenEuler
    runs-on: ubuntu-20.04
    timeout-minutes: 90
    env:
      KVER: "*"
    strategy:
      matrix:
        release: [
                # CentOS
                { "name": "8.0.1905", "container": "rockylinux:8.5" },
                { "name": "8.1.1911", "container": "rockylinux:8.5" },
                { "name": "8.2.2004", "container": "rockylinux:8.5" },
                { "name": "8.3.2011", "container": "rockylinux:8.5" },
                { "name": "8.4.2105", "container": "rockylinux:8.5" },
                { "name": "8.5.2111", "container": "rockylinux:8.5" },
                { "name": "8-stream", "container": "rockylinux:8.5" },
                # openEuler
                # BCLinux
                #{ "name": "el8",   "container": "rockylinux:8.5" },
                #{ "name": "el8.1", "container": "rockylinux:8.5" },
                #{ "name": "el8.2", "container": "rockylinux:8.5" },
        ]
    container:
      image: ${{ matrix.release.container }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Set Download Environment
        env:
          RELEASE_NAME: ${{ matrix.release.name }}
        run: |
          case $RELEASE_NAME in
          el8*)                MIRROR="mirrors.bclinux.org/bclinux" ;;
          openEuler*)          MIRROR="repo.openeuler.org" ;;
          7.[0-8].*|8.[0-5].*) MIRROR="vault.centos.org" ;;
          9.0)                 MIRROR="dl.rockylinux.org/vault/rocky" ;;
          9.[1-9])             MIRROR="dl.rockylinux.org/pub/rocky" ;;
          9-*)                 MIRROR="mirror.stream.centos.org" ;;
          *)                   MIRROR="mirror.centos.org/centos" ;;
          esac

          case $RELEASE_NAME in
          7.*)    OS_DIR1="os"
                  OS_DIR2=""
                  ;;
          8*|el8*)OS_DIR1="BaseOS"
                  OS_DIR2="os"
                  ;;
          9*)     OS_DIR1="AppStream"
                  OS_DIR2="os"
                  ;;
          openEuler*) OS_DIR1="OS"
                      OS_DIR2=""
          esac

          case $RELEASE_NAME in
          9.*)    OS_PATH="$MIRROR/$RELEASE_NAME/$OS_DIR1/x86_64/$OS_DIR2/Packages/k/"
                  ;;
          *)      OS_PATH="$MIRROR/$RELEASE_NAME/$OS_DIR1/x86_64/$OS_DIR2/Packages/"
          esac

          UPDATE_PATH="$MIRROR/$RELEASE_NAME/updates/x86_64/$OS_DIR2/Packages/"
          echo "OS_PATH=$OS_PATH" >> $GITHUB_ENV
          echo "UPDATE_PATH=$UPDATE_PATH" >> $GITHUB_ENV

      - name: Cache OS Kernel Header Packages
        uses: actions/cache@v3
        env:
          cache-name: cache-os-headers
        with:
          path: ${{ env.DOWNLOAD }}/${{ env.OS_PATH }}
          key: ${{ env.cache-name }}-${{ matrix.release.name }}-v1

      - name: Cache Update Kernel Header Packages
        if: startsWith(matrix.release.name, '7')
        uses: actions/cache@v3
        env:
          cache-name: cache-update-headers
        with:
          path: ${{ env.DOWNLOAD }}/${{ env.UPDATE_PATH }}
          key: ${{ env.cache-name }}-${{ matrix.release.name }}-v1

      - name: Install Dependencies
        run: yum -q -y install cpio elfutils-libelf-devel findutils gcc make wget ca-certificates

      - name: test yum repo
        run: |
            ls /etc/yum.repos.d/
            cat /etc/yum.repos.d/Rocky-AppStream.repo
            ls /etc/yum/vars
            yum provides libgcc

      - name: Filter CentOS stream 8 kernel
        if: startsWith(matrix.release.name, '8-stream')
        run: |
          KVER=$(curl -s "http://${{ env.OS_PATH }}/" | \
            sed -En 's/.*kernel-devel-(4.18.0-[0-9].*).el8.*rpm.*/\1/p' | \
            tail -n 1)
          echo $KVER
          echo "KVER=${KVER}*" >> $GITHUB_ENV

      - name: Filter CentOS stream 9 and RHEL 9 kernels
        if: startsWith(matrix.release.name, '9')
        run: |
          KVER=$(curl -s "http://${{ env.OS_PATH }}/" | \
            sed -En 's/.*kernel-devel-(5.14.0-[0-9].*).el9*rpm.*/\1/p' | \
            tail -n 1)
          echo $KVER
          echo "KVER=${KVER}*" >> $GITHUB_ENV

      - name: Filter latest BCLinux stream kernel
        if: startsWith(matrix.release.name, 'el8')
        run: |
          for i in $(curl -s "http://${{ env.OS_PATH }}/" | \
          grep -o -E "kernel-devel-4.19.0-([0-9]|.){1,12}.el8([0-9]|_){0,9}.bclinux.x86_64.rpm")
          do
            var=${i%.el8*}
            var=${var#*4.19.0-}
            array[${#array[@]}]=$var
          done
          for((i=0;i<${#array[@]}-1;i++))
          do
            ver1=${array[$i]}
            ver2=${array[$((i+1))]}
            if [ ${ver1%%.*} -gt ${ver2%%.*} ];then
              array[$((i+1))]=${array[$i]}
            else
              ver1=${ver1#*.}
              ver2=${ver2#*.}
              if [ ${ver1%%.*} -gt ${ver2%%.*} ];then
                array[$((i+1))]=${array[$i]}
              else
                ver1=${ver1#*.}
                ver2=${ver2#*.}
                if [ ${ver1%%.*} -gt ${ver2%%.*} ];then
                  array[$((i+1))]=${array[$i]}
                fi
              fi
            fi
          done
          KVER="4.19.0-"${array[((${#array[@]}-1))]}
          echo $KVER
          echo "KVER=${KVER}*" >> $GITHUB_ENV

      - name: Filter latest openEuler kernel
        if: startsWith(matrix.release.name, 'openEuler')
        run: |
          if [ ${{ contains(matrix.release.name, '20') }} ]; then
            KVER=$(curl -s "http://${{ env.OS_PATH }}/" | \
              sed -En 's/.*kernel-devel-(4.19.90-[0-9].*).oe1.*rpm.*/\1/p' | \
              tail -n 1)
          elif [ ${{ contains(matrix.release.name, '22') }} ]; then
            KVER=$(curl -s "http://${{ env.OS_PATH }}/" | \
              sed -En 's/.*kernel-devel-(5.10.0-[0-9].*).oe2203.*rpm.*/\1/p' | \
              tail -n 1)
          fi
          echo $KVER
          echo "KVER=${KVER}*" >> $GITHUB_ENV

      - name: Download OS Kernel Header Packages
        uses: ./.github/actions/download
        with:
            output-path: ${{ env.DOWNLOAD }}
            url: "http://${{ env.OS_PATH }}"
            accept: "kernel-devel-${{ env.KVER }}.rpm"

      - name: Download Update Kernel Header Packages
        if: startsWith(matrix.release.name, '7')
        uses: ./.github/actions/download
        with:
            output-path: ${{ env.DOWNLOAD }}
            url: "http://${{ env.UPDATE_PATH }}"
            accept: "kernel-devel-${{ env.KVER }}.rpm"

      - name: Unpack Kernel Headers
        uses: ./.github/actions/unpack-rpm
        with:
            input-path: ${{ env.DOWNLOAD }}
            output-path: ${{ env.UNPACKED }}

      - name: Build
        uses: ./.github/actions/build
        with:
            search-path: "${{ env.UNPACKED }}/usr/src/kernels"
