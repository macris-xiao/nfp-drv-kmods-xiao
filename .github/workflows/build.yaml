name: Build

# ========== TRIGGER ==========

on:
  push:
    branches:
      - main            # default branch name
      - '*-build*'      # Temporary build, no testing
      - '*build-*'      # Temporary build, no testing
      - 'prerelease-*'  # Prerelease build
      - 'release-*'     # Release build
      - '*.check'

env:
  DOWNLOAD: ".download"
  UNPACKED: ".unpacked"

jobs:
  build-upstream-centos-container:
    name: Build Upstream (CentOS container)
    runs-on: ubuntu-20.04
    timeout-minutes: 20
    env:
      CDN: "cdn.kernel.org/pub/linux/kernel"
      KERNEL_TARGET: ""
    strategy:
      matrix:
        release: [
          "4.10",
          "4.9",
          "4.8",
          "4.7",
          "4.6",
        ]
    container:
      image: centos:7.5.1804
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Set Environment (Release)
        run: |
          RELEASE="${{ matrix.release }}"
          EXTRA_DEP+=" elfutils-libelf-devel"
          EXTRA_DEP+=" gcc"
          EXTRA_DEP+=" make"
          EXTRA_DEP+=" wget"
          EXTRA_DEP+=" rpm-build"
          EXTRA_DEP+=" perl"
          EXTRA_DEP+=" perl-devel"
          EXTRA_DEP+=" bc"
          EXTRA_DEP+=" ca-certificates"
          MAJOR="${RELEASE%.*}"
          DIR="linux-$RELEASE"
          echo "EXTRA_DEP=$EXTRA_DEP" >> $GITHUB_ENV
          echo "KERNEL_DIR=$UNPACKED/$DIR" >> $GITHUB_ENV
          echo "REMOTE=$CDN/v$MAJOR.x/$DIR.tar.xz" >> $GITHUB_ENV
          echo "TAR_FLAGS=-J" >> $GITHUB_ENV

      - name: Install Dependencies
        if: env.EXTRA_DEP != ''
        run: yum -qy install ${{ env.EXTRA_DEP }}

      - name: Download Kernel Source
        uses: ./.github/actions/download
        with:
          output-path: "$DOWNLOAD"
          url: "https://$REMOTE"

      - name: Unpack Kernel Source
        run: |
          mkdir -p "$UNPACKED"
          tar -C "$UNPACKED" "$TAR_FLAGS" -xf "$DOWNLOAD/$REMOTE"

      - name: Patch Kernel Source
        if: matrix.release.name == '3.8'
        run: |
          sed -i 's/if (!defined(@val))/if (!(@val))/' \
            "$KERNEL_DIR/kernel/timeconst.pl"

      - name: Configure Kernel
        run: |
          cp -p .github/data/local_defconfig "$KERNEL_DIR/arch/x86/configs/"
          make -s -C "$KERNEL_DIR" local_defconfig

      - name: Build Kernel Packages
        run: |
          make -s -j $(nproc) -C "$KERNEL_DIR"

      - name: Build
        uses: ./.github/actions/build
        with:
          search-path: "$KERNEL_DIR/../"
          search-pattern: "*${{ matrix.release.name }}*"
